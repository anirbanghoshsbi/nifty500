# -*- coding: utf-8 -*-
"""Momentum_Strategy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dmij_S-JtE6H9Y4ecnK_1jb37pEqHxJW
"""

# import necessary packages
import pandas as pd
import numpy as np
import pandas_datareader.data as reader
import datetime as dt
from pandas.tseries.offsets import MonthEnd
var='https://raw.githubusercontent.com/anirbanghoshsbi/nifty500/main/ind_nifty500list.csv?token=AJWJL43GYMDMYT5AWH5QNOLA6WDI2'
symbols=pd.read_csv(var)

symbols['data']=symbols.Symbol+'.NS'

ticker=symbols.data.tolist()

#Get the NSE Component prices
start_date = dt.datetime(2018,1,31)
end_date= dt.datetime(2021,5,31)
df =reader.get_data_yahoo(ticker,start_date,end_date)['Adj Close']


# Get daily return and then cummulate it to monthly return
monthly_return = df.pct_change().resample('M').agg(lambda x:(x+1).prod()-1)

#Calculate returns over last 11 months to 6 months
past_11 = (monthly_return+1).rolling(11).apply(np.prod)-1
past_10 = (monthly_return+1).rolling(10).apply(np.prod)-1
past_9 = (monthly_return+1).rolling(9).apply(np.prod)-1
past_8 = (monthly_return+1).rolling(8).apply(np.prod)-1
past_7 = (monthly_return+1).rolling(7).apply(np.prod)-1
past_6 = (monthly_return+1).rolling(6).apply(np.prod)-1

formation=dt.datetime(2021,5,31)

from pandas.tseries.offsets import MonthEnd
end_measurement11= formation- MonthEnd(1)
end_measurement10 = formation-MonthEnd(2)

end_measurement09 = formation-MonthEnd(3)
end_measurement08 = formation-MonthEnd(4)
end_measurement07 = formation-MonthEnd(5)
end_measurement06 = formation-MonthEnd(6)

end_measurement11

ret_12 = past_11.loc[end_measurement11]

ret_11 = past_10.loc[end_measurement10]
ret_10 = past_9.loc[end_measurement09]
ret_09 = past_8.loc[end_measurement08]
ret_08 = past_7.loc[end_measurement07]
ret_07 = past_6.loc[end_measurement06]

ret_12=ret_12.reset_index()
ret_11=ret_11.reset_index()
ret_10=ret_10.reset_index()
ret_09=ret_09.reset_index()
ret_08=ret_08.reset_index()
ret_07=ret_07.reset_index()

ret_12['quintile'] = pd.qcut(ret_12.iloc[:,1],5,labels=False)
ret_11['quintile'] = pd.qcut(ret_11.iloc[:,1],5,labels=False)
ret_10['quintile'] = pd.qcut(ret_10.iloc[:,1],5,labels=False)
ret_09['quintile'] = pd.qcut(ret_09.iloc[:,1],5,labels=False)
ret_08['quintile'] = pd.qcut(ret_08.iloc[:,1],5,labels=False)
ret_07['quintile'] = pd.qcut(ret_07.iloc[:,1],5,labels=False)

winners12= ret_12[ret_12.quintile==4]
winners11= ret_11[ret_11.quintile==4]
winners10= ret_10[ret_10.quintile==4]
winners9= ret_09[ret_09.quintile==4]
winners08= ret_08[ret_08.quintile==4]
winners07= ret_07[ret_07.quintile==4]

# Getting Common Winners

from functools import reduce # python 3 only
final_winner=reduce(np.intersect1d, [winners12.Symbols,winners11.Symbols,\
                                      winners10.Symbols,winners9.Symbols,\
                                      winners08.Symbols,winners07.Symbols])

final_winner=final_winner.tolist()

final_winner
